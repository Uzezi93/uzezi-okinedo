filter(sub_pop == "TRJ") %>%
ggplot(aes(x = Treatment, y = Spikelet_no, fill = Treatment)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
scale_fill_manual(values = c("Control" = "palegreen1", "Heat" = "tomato3")) +  # Custom fill colors
stat_compare_means(aes(group = Treatment), label = "p.signif") +
labs(title = "Spikelet Number by Treatment (Chromosome 3)",
x = "Treatment",
y = "Spikelet Number") +
theme_minimal() +
facet_wrap(~chr3)  # Facet by two variables
seed_long %>%
filter(Treatment %in% c("Control", "Heat")) %>%
filter(chromosome == "chr3") %>%
#filter(sub_pop == "TRJ") %>%
ggplot(aes(x = Treatment, y = Spikelet_no, fill = Treatment)) +
geom_boxplot(position = position_dodge(width = 0.75)) +
scale_fill_manual(values = c("Control" = "palegreen1", "Heat" = "tomato3")) +  # Custom fill colors
stat_compare_means(aes(group = Treatment), label = "p.signif") +
labs(title = "Spikelet Number by Treatment (Chromosome 3)",
x = "Treatment",
y = "Spikelet Number") +
theme_minimal() +
facet_wrap(~sub_pop)  # Facet by two variables
# Print the plot
print(p7)
#------------------------------------------------------------------------
# mixed model regression with PCs
# Select relevant columns for PCA for chr3
chr3_data <- seed_long %>%
select(Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight, Treatment, chromosome, chr3, chr7, sub_pop, Samples, Block, panicle) %>%
filter(Treatment %in% c("Control", "Heat")) %>%
filter(chromosome %in% "chr3")
pca_data <- chr3_data %>%
select(., Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight)
traits_standardized <- scale(pca_data)
# Perform PCA with missing values
pca_result <- PCA(traits_standardized, ncp = 5, scale.unit = TRUE, graph = FALSE)
# View results
summary(pca_result)
# Extract the first 3 PCs from the individual coordinates
pca_scores <- pca_result$ind$coord[, 1:3]
# Preview the extracted scores
head(pca_scores)
# Create a dataframe with PC scores
pca_data <- as.data.frame(pca_scores)
pca_data$Treatment <- chr3_data$Treatment
pca_data$sub_pop <- chr3_data$sub_pop
pca_data$Samples <- chr3_data$Samples
pca_data$allele <- chr3_data$chr3
pca_data$panicle <- chr3_data$panicle
pca_data$Block <- chr3_data$Block
pca_data$allele <- factor(pca_data$allele, levels = c("GG", "AA"))
pca_data$sub_pop <- factor(pca_data$sub_pop, levels = c("TRJ", "AUS"))
# Extract the explained variance (percentage) for PC1 and PC2
explained_variance <- pca_result$eig[1:2, 2]  # Extract the percentages for PC1 and PC2
# Print the explained variance percentages
explained_variance
# Plot PCA with custom points and larger labels/titles
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Increase point size
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +  # Custom color scale
facet_wrap(~ allele) +  # Facet by allele
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),  # Increase title size and make it bold
axis.title = element_text(size = 14),  # Increase axis title size
axis.text = element_text(size = 12)   # Increase axis label size
)
# Fit the multivariate model
model_brms <- brm(
formula = mvbind(Dim.1, Dim.2, Dim.3) ~ Treatment * allele * sub_pop + (1 | Block) + (1 | Samples) + (1 | panicle),
data = pca_data,
family = gaussian()
)
# Summarize the model
summary(model_brms)
# Extract fixed effects (estimates, standard errors, and confidence intervals)
fixed_effects <- fixef(model_brms, summary = TRUE)
# Convert to a dataframe for ggplot2
fixed_effects_df <- as.data.frame(fixed_effects)
fixed_effects_df$Term <- rownames(fixed_effects_df)
# Rename columns for clarity
colnames(fixed_effects_df) <- c("Estimate", "Est.Error", "l-95% CI", "u-95% CI", "Term")
# Filter and separate the Term column using the correct separator
fixed_effects_df <- fixed_effects_df %>%
filter((`l-95% CI` > 0 & `u-95% CI` > 0) | (`l-95% CI` < 0 & `u-95% CI` < 0)) #%>%
# Remove "PC_" from the Term column
fixed_effects_df$Term <- gsub("PC\\d_", "", fixed_effects_df$Term)
# Plot fixed effects with confidence intervals
p1 <- ggplot(fixed_effects_df, aes(x = Estimate, y = Term)) +
geom_point(colour = "blue", size = 3) +  # Change point color to blue and increase point size
geom_errorbarh(aes(xmin = `l-95% CI`, xmax = `u-95% CI`), height = 0.2, colour = "blue", size = 1.5) +  # Change error bar color to blue and increase line thickness
theme_minimal() +
#facet_grid(.~ Response, scales = "free") +
xlab("Effect Estimate") +
ylab("Interaction") +
ggtitle("Fixed Effects with 95% Confidence Intervals for Chr3") +
theme(
axis.text.x = element_text(size = 15),  # Increase x-axis text size
axis.text.y = element_text(size = 15),  # Increase y-axis text size
axis.title.x = element_text(size = 16),  # Increase x-axis title size
axis.title.y = element_text(size = 16)   # Increase y-axis title size
)
p1
# Create the interaction plot with faceting for each trait
p7 <- ggplot(interaction_data, aes(x = Treatment, y = mean_value, color = chr3, group = chr3)) +
geom_line(size = 1) +            # Line for each group
geom_point(size = 3) +           # Points for mean values
labs(title = "Interaction Plot of Treatment and Chr3 Allele on Traits",
x = "Treatment",
y = "Mean Value") +
theme_minimal() +                # Clean theme
scale_color_manual(values = c("red", "blue")) + # Custom colors
theme(legend.title = element_blank()) +  # Remove legend title
facet_wrap(trait ~ sub_pop, scales = "free_y")  # Facet by trait and sub_pop
# Print the plot
print(p7)
# Plot PCA with custom points and larger labels/titles
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Increase point size
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +  # Custom color scale
facet_wrap(~ allele) +  # Facet by allele
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),  # Increase title size and make it bold
axis.title = element_text(size = 14),  # Increase axis title size
axis.text = element_text(size = 12)   # Increase axis label size
)
View(pca_data)
pca_data$Dim.1 <- pca_data$Dim.1 * arrow_scale
# Scale the arrows (scaling factor to adjust length for visibility)
arrow_scale <- 3  # Adjust this factor as needed
pca_data$Dim.1 <- pca_data$Dim.1 * arrow_scale
pca_data$Dim.2 <- pca_data$Dim.2 * arrow_scale
# Plot PCA with arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add arrows for trait loadings
geom_segment(data = trait_loadings,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for trait arrows
geom_text(data = trait_loadings,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue",
vjust = -0.5,
inherit.aes = FALSE) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Create a dataframe with PC scores
pca_data <- as.data.frame(pca_scores)
pca_data$Treatment <- chr3_data$Treatment
pca_data$sub_pop <- chr3_data$sub_pop
pca_data$Samples <- chr3_data$Samples
pca_data$allele <- chr3_data$chr3
pca_data$panicle <- chr3_data$panicle
pca_data$Block <- chr3_data$Block
pca_data$allele <- factor(pca_data$allele, levels = c("GG", "AA"))
pca_data$sub_pop <- factor(pca_data$sub_pop, levels = c("TRJ", "AUS"))
# Extract the explained variance (percentage) for PC1 and PC2
explained_variance <- pca_result$eig[1:2, 2]  # Extract the percentages for PC1 and PC2
# Print the explained variance percentages
explained_variance
# Scale the arrows (scaling factor to adjust length for visibility)
arrow_scale <- 3  # Adjust this factor as needed
trait_loadings <- pca_data %>%
select(Dim.1, Dim.2)
trait_loadings$Dim.1 <- trait_loadings$Dim.1 * arrow_scale
trait_loadings$Dim.2 <- trait_loadings$Dim.2 * arrow_scale
# Plot PCA with arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add arrows for trait loadings
geom_segment(data = trait_loadings,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for trait arrows
geom_text(data = trait_loadings,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue",
vjust = -0.5,
inherit.aes = FALSE) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
#------------------------------------------------------------------------
# mixed model regression with PCs
# Select relevant columns for PCA for chr3
chr3_data <- seed_long %>%
select(Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight, Treatment, chromosome, chr3, chr7, sub_pop, Samples, Block, panicle) %>%
filter(Treatment %in% c("Control", "Heat")) %>%
filter(chromosome %in% "chr3")
pca_data <- chr3_data %>%
select(., Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight)
traits_standardized <- scale(pca_data)
# Perform PCA with missing values
pca_result <- PCA(traits_standardized, ncp = 5, scale.unit = TRUE, graph = FALSE)
# View results
summary(pca_result)
# Extract the first 3 PCs from the individual coordinates
pca_scores <- pca_result$ind$coord[, 1:3]
# Preview the extracted scores
head(pca_scores)
# Create a dataframe with PC scores
pca_data <- as.data.frame(pca_scores)
pca_data$Treatment <- chr3_data$Treatment
pca_data$sub_pop <- chr3_data$sub_pop
pca_data$Samples <- chr3_data$Samples
pca_data$allele <- chr3_data$chr3
pca_data$panicle <- chr3_data$panicle
pca_data$Block <- chr3_data$Block
pca_data$allele <- factor(pca_data$allele, levels = c("GG", "AA"))
pca_data$sub_pop <- factor(pca_data$sub_pop, levels = c("TRJ", "AUS"))
View(pca_scores)
View(chr3_data)
#------------------------------------------------------------------------
# mixed model regression with PCs
# Select relevant columns for PCA for chr3
chr3_data <- seed_long %>%
select(Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight, Treatment, chromosome, chr3, chr7, sub_pop, Samples, Block, panicle) %>%
filter(Treatment %in% c("Control", "Heat")) %>%
filter(chromosome %in% "chr3")
pca_data <- chr3_data %>%
select(., Biomass, flowering_time, Spikelet_fertility, Seed_per_panicle, Spikelet_no, Seed_weight)
traits_standardized <- scale(pca_data)
# Perform PCA with missing values
pca_result <- PCA(traits_standardized, ncp = 5, scale.unit = TRUE, graph = FALSE)
# View results
summary(pca_result)
# Extract the first 3 PCs from the individual coordinates
pca_scores <- pca_result$ind$coord[, 1:3]
# Preview the extracted scores
head(pca_scores)
# Create a dataframe with PC scores
pca_data <- as.data.frame(pca_scores)
pca_data$Treatment <- chr3_data$Treatment
pca_data$sub_pop <- chr3_data$sub_pop
pca_data$Samples <- chr3_data$Samples
pca_data$allele <- chr3_data$chr3
pca_data$panicle <- chr3_data$panicle
pca_data$Block <- chr3_data$Block
pca_data$allele <- factor(pca_data$allele, levels = c("GG", "AA"))
pca_data$sub_pop <- factor(pca_data$sub_pop, levels = c("TRJ", "AUS"))
pca_data <- cbind(pca_data, chr3_data[, 1:6])
# Extract the explained variance (percentage) for PC1 and PC2
explained_variance <- pca_result$eig[1:2, 2]  # Extract the percentages for PC1 and PC2
# Print the explained variance percentages
explained_variance
# Scale the arrows (scaling factor to adjust length for visibility)
arrow_scale <- 3  # Adjust this factor as needed
trait_loadings <- pca_data %>%
select(Dim.1,
Dim.2,
Biomass,
flowering_time,
Spikelet_fertility,
Spikelet_no,
Seed_per_panicle,
Seed_weight)
trait_loadings$Dim.1 <- trait_loadings$Dim.1 * arrow_scale
trait_loadings$Dim.2 <- trait_loadings$Dim.2 * arrow_scale
# Plot PCA with arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add arrows for trait loadings
geom_segment(data = trait_loadings,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for trait arrows
geom_text(data = trait_loadings,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue",
vjust = -0.5,
inherit.aes = FALSE) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
View(trait_loadings)
str(trait_loadings)
trait_loadings_long <- trait_loadings %>%
pivot_longer(
cols = -c(Dim.1, Dim.2),  # Keep Dim.1 and Dim.2 as they are
names_to = "Trait",       # Name for the column containing variable names
values_to = "Value"       # Name for the column containing variable values
)
View(trait_loadings)
View(trait_loadings_long)
# Plot PCA with arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add arrows for trait loadings
geom_segment(data = trait_loadings_long,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for trait arrows
geom_text(data = trait_loadings_long,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue",
vjust = -0.5,
inherit.aes = FALSE) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
)
# Scale trait loadings to reduce overlap
trait_loadings_long_scaled <- trait_loadings_long %>%
mutate(Dim.1 = Dim.1 * 0.5, Dim.2 = Dim.2 * 0.5)  # Scale down by 0.5
# Plot PCA with corrected arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Points
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add scaled arrows for trait loadings
geom_segment(data = trait_loadings_long_scaled,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for trait arrows, avoid duplicates
geom_text(data = trait_loadings_long_scaled,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue",
vjust = -0.5,
check_overlap = TRUE,  # Avoid overlapping labels
inherit.aes = FALSE) +
theme(
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
# Scale trait loadings and remove duplicates
trait_loadings_long_scaled <- trait_loadings_long %>%
distinct(Trait, Dim.1, Dim.2) %>%       # Retain unique rows
mutate(Dim.1 = Dim.1 * 0.5,            # Scale arrows down
Dim.2 = Dim.2 * 0.5)
# Plot PCA with corrected arrows
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +
facet_wrap(~ allele) +
theme_minimal() +
labs(
title = "PCA of Reproductive Traits (Chromosome 3)",
x = paste0("PC1 (", round(explained_variance[1], 1), "%)"),
y = paste0("PC2 (", round(explained_variance[2], 1), "%)")
) +
# Add scaled arrows for unique trait loadings
geom_segment(data = trait_loadings_long_scaled,
aes(x = 0, y = 0, xend = Dim.1, yend = Dim.2),
arrow = arrow(length = unit(0.3, "cm")),
color = "blue",
inherit.aes = FALSE) +
# Add labels for unique trait arrows
geom_text(data = trait_loadings_long_scaled,
aes(x = Dim.1, y = Dim.2, label = Trait),
color = "blue
# Plot PCA with custom points and larger labels/titles
ggplot(pca_data, aes(x = Dim.1, y = Dim.2, color = Treatment)) +
geom_point(size = 4) +  # Increase point size
scale_colour_manual(values = c("Control" = "darkgreen", "Heat" = "tomato3")) +  # Custom color scale
install.packages("servr")
library(servr)
servr::httd(dir = "_site")
getwd()
setwd("my-website")
setwd("/Users/uzeziokinedo/Documents/uzezi_okinedo.github.io")
servr::httd(dir = "my-website")
servr::httd(dir = "my-website")
install.packages("usethis")
usethis::create_github_repo("Uzezi93/uzezi_okinedo.github.io", private = FALSE)
# Set up Git in your local directory (if not already set up)
usethis::use_git()
usethis::use_github(repo_spec = "Uzezi93/uzezi_okinedo.github.io")
install.packages("git2r")
library(git2r)
# Set your GitHub repo details
repo <- "https://github.com/Uzezi93/uzezi_okinedo.github.io"
branch <- "main"  # or "master"
# Load required packages
if (!require("rmarkdown")) install.packages("rmarkdown")
# Knit the RMarkdown file to index.html
rmarkdown::render("index.Rmd", output_format = "html_document")
getwd()
# Knit the RMarkdown file to index.html
rmarkdown::render("Index.Rmd", output_format = "html_document")
# Use system commands to commit and push changes to GitHub
system("git add index.html")
system("git commit -m 'Add index.html for GitHub Pages'")
system("git push origin main")
# Knit the RMarkdown file to index.html
rmarkdown::render("index.Rmd", output_format = "html_document")
getwd()
# Knit the RMarkdown file to index.html
rmarkdown::render("index.Rmd", output_format = "html_document")
getwd()
source("~/.active-rstudio-document", echo=TRUE)
# Specify the file name
config_file <- "_config.yml"
# Create the file
file.create(config_file)
# Define the configuration content
config_content <- c(
'title: "Uzezi Okinedo"',
'description: "Biology Ph.D. candidate researching plant genomics and evolutionary biology."',
'theme: minima',
'baseurl: ""', # Leave empty unless hosted in a subdirectory
'url: "https://uzezi93.github.io"',
'',
'# Exclude these files/folders from the build process',
'exclude:',
'  - .github',
'',
'# Navigation (optional for navbar)',
'header_pages:',
'  - index.md'
)
# Write the content to the file
writeLines(config_content, config_file)
# Define the configuration content
config_content <- c(
'title: "Uzezi Okinedo"',
'description: "Biology Ph.D. candidate researching plant genomics and evolutionary biology."',
'theme: minima',
'baseurl: ""', # Leave empty unless hosted in a subdirectory
'url: "https://uzezi93.github.io/uzezi-okinedo/"',
'',
'# Exclude these files/folders from the build process',
'exclude:',
'  - .github',
'',
'# Navigation (optional for navbar)',
'header_pages:',
'  - index.md'
)
# Write the content to the file
writeLines(config_content, config_file)
list.files()
getwd()
